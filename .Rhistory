#with(wordcloud(word, n, max.words = 100))
data(stop_words)
par(mfrow = c(2, 3))
airlines <- unique(airline_tweets$airline)
for(airline in airlines) {
my_tweets <- dplyr::select(airline_tweets, tweet_id, text, airline) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, airline, sort = TRUE) %>%
filter(airline == airline) %>%
with(wordcloud(word, n, max.words = 100))
}
data(stop_words)
#airline_tweets <- read_csv("https://raw.githubusercontent.com/sventura/315-code-and-datasets/master/data/Tweets.csv")
unique(airline_tweets$airline)
par(mfrow = c(2, 3))
for(airline in unique(airline_tweets$airline)){
my_tweets <- dplyr::select(airline_tweets, tweet_id, text, airline) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, airline, sort = TRUE) %>%
filter(airline == airline) %>%
with(wordcloud(word, n, max.words = 100))
}
library(gridExtra)
#VA <- dplyr::filter(airline_tweets, airline == "Virgin America")
#VAdata <- dplyr::select(VA, tweet_id, text) %>%
#  unnest_tokens(word, text) %>%
#  anti_join(stop_words) %>%
#  count(word) #%>%
#with(wordcloud(word, n, max.words = 100))
#VAcloud <- VAdata + wordcloud(word, n, max.words = 100)
#UA <- dplyr::filter(airline_tweets, airline == "United")
#UAdata <- dplyr::select(UA, tweet_id, text) %>%
#  unnest_tokens(word, text) %>%
#  anti_join(stop_words) %>%
#  count(word) #%>%
#with(wordcloud(word, n, max.words = 100))
data(stop_words)
par(mfrow = c(2, 3))
airlines <- unique(airline_tweets$airline)
airlines
for(airline in airlines) {
my_tweets <- dplyr::select(airline_tweets, tweet_id, text, airline) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, airline, sort = TRUE) %>%
filter(airline == airline) %>%
with(wordcloud(word, n, max.words = 100))
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  tt:  The point at which we want the moving average (leading up to that point)
moving_average <- function(tt, time_series, ww) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
#  If the window width is greater than the time point, return NA
if (tt < ww)  return(NA)
return(mean(time_series[(tt-ww+1):tt]))
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
get_moving_averages <- function(time_series, ww) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
vals <- vector()
for(i in  0:length(time_series)){
vals[i] <- moving_average(i, time_series, ww)
}
return(vals)
}
bike_moving_averages_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_averages_14[0:20]
library(tidyverse)
library(forcats)
library(dplyr)
johnnywu_315_theme <-  theme_bw() +
theme(axis.text = element_text(size = 10, color="royalblue"),
text = element_text(size = 12, face="italic", color="black"))
library(tidyverse)
big_bike <- read_csv("https://raw.githubusercontent.com/sventura/315-code-and-datasets/master/data/big_bike.csv")
#  Add start_date variable to big_bike, and a bunch of other variables
big_bike <- mutate(big_bike,
start_date = as.Date(start_date),
birth_decade = paste0(substr(`birth year`, 1, 3), "0s"),
hour_of_day = as.integer(substr(time_of_day, 1, 2)),
am_or_pm = ifelse(hour_of_day < 12, "AM", "PM"),
day_of_week = weekdays(start_date),
less_than_30_mins = ifelse(tripduration < 1800,
"Short Trip", "Long Trip"),
weekend = ifelse(day_of_week %in% c("Saturday", "Sunday"),
"Weekend", "Weekday"))
dim(big_bike)
min(big_bike$start_date)
max(big_bike$start_date)
library(ggplot2)
#  Summarize the big_bike, creating a new data.frame that includes the number
#  of trips taken on each day
trips_per_day <- big_bike %>%
group_by(start_date) %>%
summarize(n_trips = n())
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line() +
scale_x_date() + geom_point() +
labs(
title = "Number of Bike Trips over Time",
x = "Bike Trip Start Date",
y = "Number of Trips"
) + johnnywu_315_theme
max(trips_per_day$n_trips)
#  Summarize the big_bike, creating a new data.frame that includes the number
#  of trips taken on each day, split by usertype
trips_per_day_usertype <- big_bike %>%
group_by(start_date, usertype) %>%
summarize(n_trips = n())
#  Create a time series plot with the dates on the x-axis and the number of
#  trips per day on the y-axis, split by usertype
ggplot(trips_per_day_usertype, aes(x = start_date, y = n_trips, color = usertype)) +
geom_line() + scale_x_date() +
labs(
title = "Number of Bike Trips over Time",
x = "Bike Trip Start Date",
y = "Number of Trips",
color = "User Type"
) + johnnywu_315_theme + scale_color_manual(values=c("yellow", "green"))
rand_ts <- rnorm(1000)
acf(rand_ts, plot = FALSE)
acf(rand_ts, plot = TRUE)
bike_acf <- acf(trips_per_day$n_trips, plot = FALSE)
names(bike_acf)
bike_acf$acf
bike_acf$lag
par(mfrow = c(1, 2))
acf(filter(trips_per_day_usertype, usertype == "Customer")$n_trips, main = "Customer Bike Trip Autocorrelation")
acf(filter(trips_per_day_usertype, usertype == "Subscriber")$n_trips, main = "Subscriber Bike Trip Autocorrelation")
#install.packages("tidytext")
#install.packages("wordcloud")
library(tidyverse)
library(tidytext)
library(wordcloud)
data(stop_words)
airline_tweets <- read_csv("https://raw.githubusercontent.com/sventura/315-code-and-datasets/master/data/Tweets.csv")
my_tweets <- dplyr::select(airline_tweets, tweet_id, text) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(gridExtra)
data(stop_words)
par(mfrow = c(2, 3))
airlines <- unique(airline_tweets$airline)
airlines
for(airline in airlines) {
my_tweets <- dplyr::select(airline_tweets, tweet_id, text, airline) %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word, airline, sort = TRUE) %>%
filter(airline == airline) %>%
with(wordcloud(word, n, max.words = 100))
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  tt:  The point at which we want the moving average (leading up to that point)
moving_average <- function(tt, time_series, ww) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
#  If the window width is greater than the time point, return NA
if (tt < ww) {
return(NA)
}
return(mean(time_series[(tt - ww + 1):tt]))
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
get_moving_averages <- function(time_series, ww) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
vals <- vector()
for(i in  0:length(time_series)) {
vals[i] <- moving_average(i, time_series, ww)
}
return(vals)
}
bike_moving_averages_14 <- get_moving_averages(trips_per_day$n_trips, 14)
bike_moving_averages_14[0:20]
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(color="blue")) +
geom_line(aes(y=bike_14, color = "green")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Colors") +
scale_colour_discrete(labels = c("Number of Trips", "Moving Average"))
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(color="blue")) +
geom_line(aes(y=bike_14, color = "limegreen")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Colors") +
scale_colour_discrete(labels = c("Number of Trips", "Moving Average"))
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  tt:  The point at which
#  weights:  the weights to be used in the moving average
#  Note:  length(weights) should always equal ww!
weighted_moving_average <- function(tt, time_series, ww, weights = NULL) {
#  Throw an error if the window width is too big
if (ww > length(time_series))
stop("Window width is greater than length of time series")
#  If weights are not specified, use standard weights
if (is.null(weights))  weights <- rep(1/ww, ww)
#  Throw an error if the window width is too big
if (length(weights) != ww)
stop("Weights should have the same length as the window width")
#  If the window width is greater than the time point, return NA
if (tt < ww)  return(NA)
#  Standardize the weights so they sum to 1
weights <- weights / sum(weights)
return(sum(time_series[(tt - ww + 1):tt] * weights))
}
#  time_series:  A vector containing the time series values
#  ww:  The window width for the moving average
#  weights:  the weights to be used in the moving average
#  Note:  length(weights) should always equal ww!
get_weighted_moving_averages <- function(time_series, ww, weights) {
#  Throw an error if the window width is too big
if(ww > length(time_series))  stop("Window width is greater than length of time series")
#  If weights are not specified, use standard weights
if (is.null(weights))  weights <- rep(1/ww, ww)
#  Throw an error if the window width is too big
if (length(weights) != ww)
stop("Weights should have the same length as the window width")
#  Standardize the weights so they sum to 1
weights <- weights / sum(weights)
vals <- vector()
for(i in  0:length(time_series)){
vals[i] <- weighted_moving_average(i, time_series, ww, weights)
}
return(vals)
}
wAverages <- get_weighted_moving_averages(trips_per_day$n_trips,7,c(1,1,1,1,1,3,5))
trips_per_day$wAverages <- wAverages
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips, color = 'n_trips')) +
geom_line(aes(y=bike_14, color = 'bma_14')) +
geom_line(aes(y=wAverages, color='wAverages'), linetype = "dashed") +
labs(title = "NYC Bike Trips", y = "Number of Trips",
x = "Date") +
scale_colour_manual(name = "colors", values = c("blue", "grey",  "red"),
labels = c("number of trips", "moving average",
"moving average \n (weighted)")) + johnnywu_315_theme
wAverages <- get_weighted_moving_averages(trips_per_day$n_trips,7,c(1,1,1,1,1,3,5))
trips_per_day$wAverages <- wAverages
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips, color = 'n_trips')) +
geom_line(aes(y=bike_14, color = 'bma_14')) +
geom_line(aes(y=wAverages, color='wAverages'), linetype = "dashed") +
labs(title = "NYC Bike Trips", y = "Number of Trips",
x = "Date") +
scale_colour_manual(name = "Bike Trips", values = c("limegreen", "magenta",  "orange"),
labels = c("Number of Trips", "Moving Average",
"Weighted Moving Average")) + johnnywu_315_theme
wAverages <- get_weighted_moving_averages(trips_per_day$n_trips,7,c(1,1,1,1,1,3,5))
trips_per_day$wAverages <- wAverages
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips, color = 'n_trips')) +
geom_line(aes(y=bike_14, color = 'bma_14')) +
geom_line(aes(y=wAverages, color='wAverages'), linetype = "dashed") +
labs(title = "NYC Bike Trips", y = "Number of Trips",
x = "Date") +
scale_colour_manual(name = "Bike Trips", values = c("magenta", "lightyellow",  "orange"),
labels = c("Number of Trips", "Moving Average",
"Weighted Moving Average")) + johnnywu_315_theme
wAverages <- get_weighted_moving_averages(trips_per_day$n_trips,7,c(1,1,1,1,1,3,5))
trips_per_day$wAverages <- wAverages
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips, color = 'n_trips')) +
geom_line(aes(y=bike_14, color = 'bma_14')) +
geom_line(aes(y=wAverages, color='wAverages'), linetype = "dashed") +
labs(title = "NYC Bike Trips", y = "Number of Trips",
x = "Date") +
scale_colour_manual(name = "Bike Trips", values = c("magenta", "lightslateblue",  "orange"),
labels = c("Number of Trips", "Moving Average",
"Weighted Moving Average")) + johnnywu_315_theme
wAverages <- get_weighted_moving_averages(trips_per_day$n_trips,7,c(1,1,1,1,1,3,5))
trips_per_day$wAverages <- wAverages
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips)) +
geom_line(aes(y=bike_14)) +
geom_line(aes(y=wAverages), linetype = "dashed") +
labs(title = "NYC Bike Trips", y = "Number of Trips",
x = "Date") +
scale_colour_manual(name = "Bike Trips", values = c("magenta", "lightslateblue",  "orange"),
labels = c("Number of Trips", "Moving Average",
"Weighted Moving Average")) + johnnywu_315_theme
wAverages <- get_weighted_moving_averages(trips_per_day$n_trips,7,c(1,1,1,1,1,3,5))
trips_per_day$wAverages <- wAverages
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(trips_per_day, aes(x = start_date)) +
geom_line(aes(y = n_trips, color = 'n_trips')) +
geom_line(aes(y=bike_14, color = 'bike_14')) +
geom_line(aes(y=wAverages, color='wAverages'), linetype = "dashed") +
labs(title = "NYC Bike Trips", y = "Number of Trips",
x = "Date") +
scale_colour_manual(name = "Bike Trips", values = c("magenta", "lightslateblue",  "orange"),
labels = c("Number of Trips", "Moving Average",
"Weighted Moving Average")) + johnnywu_315_theme
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(rand_ts)
sig_pos <- 0 + 1.96/sqrt(n-1)
sig_neg <- 0 - 1.96/sqrt(n-1)
num_lags <- length(data$acf[,,1])
acfFrame <- data.frame(lags=1:num_lags, acfs=data$acf[,,1])
corrs_plot <- ggplot(acfFrame, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, num_lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = sig_pos), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = sig_neg), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  +  theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
return(corrs_plot)
}
auto(rand_ts) +
labs(title = "Autocorrelations for random draws from normal dist.", x = "Lag", y = "ACFs")
auto(filter(trips_per_day_usertype, usertype == "Customer")$n_trips) +
labs(title = "Autocorrelations for Bike Rides per Day", x = "Lag", y = "ACFs")
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(rand_ts)
positive <- 0 + 1.96/sqrt(n-1)
negative <- 0 - 1.96/sqrt(n-1)
lags <- length(data$acf[,,1])
acfdata <- data.frame(lags = 1:lags, acfs = data$acf[,,1])
graph <- ggplot(acfdata, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = positive), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = negative), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + johnnywu_315_theme
return(graph)
}
auto(rand_ts) +
labs(title = "Autocorrelations for random draws from normal dist.", x = "Lag", y = "ACFs")
auto(filter(trips_per_day_usertype, usertype == "Customer")$n_trips) +
labs(title = "Autocorrelations for Bike Rides per Day", x = "Lag", y = "ACFs")
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(rand_ts)
positive <- 0 + 1.96/sqrt(n-1)
negative <- 0 - 1.96/sqrt(n-1)
lags <- length(data$acf[,,1])
acfdata <- data.frame(lags = 1:lags, acfs = data$acf[,,1])
graph <- ggplot(acfdata, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = positive), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = negative), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + johnnywu_315_theme
return(graph)
}
auto(rand_ts) +
labs(title = "Autocorrelations for random draws from normal dist.", x = "Lag", y = "ACFs")
auto(filter(trips_per_day_usertype, usertype == "Customer")$n_trips) +
labs(title = "Autocorrelations for Bike Rides per Day", x = "Lag", y = "ACFs")
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(rand_ts)
positive <- 0 + 1.96/sqrt(n-1)
negative <- 0 - 1.96/sqrt(n-1)
lags <- length(data$acf[,,1])
acfdata <- data.frame(lags = 1:lags, acfs = data$acf[,,1])
graph <- ggplot(acfdata, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = positive), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = negative), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) #+ johnnywu_315_theme
return(graph)
}
auto(rand_ts) +
labs(title = "Autocorrelations for random draws from normal dist.", x = "Lag", y = "ACFs")
auto(filter(trips_per_day_usertype, usertype == "Customer")$n_trips) +
labs(title = "Autocorrelations for Bike Rides per Day", x = "Lag", y = "ACFs")
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(time_series)
positive <- 0 + 1.96/sqrt(n-1)
negative <- 0 - 1.96/sqrt(n-1)
lags <- length(data$acf[,,1])
acfdata <- data.frame(lags = 1:lags, acfs = data$acf[,,1])
graph <- ggplot(acfdata, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = positive), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = negative), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + johnnywu_315_theme
return(graph)
}
auto(rand_ts) +
labs(title = "Autocorrelations for random draws from normal dist.", x = "Lag", y = "Autocorrelations")
auto(filter(trips_per_day_usertype, usertype == "Customer")$n_trips) +
labs(title = "Autocorrelations for Bike Rides per Day", x = "Lag", y = "Autocorrelations")
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(time_series)
positive <- 0 + 1.96/sqrt(n-1)
negative <- 0 - 1.96/sqrt(n-1)
lags <- length(data$acf[,,1])
acfdata <- data.frame(lags = 1:lags, acfs = data$acf[,,1])
graph <- ggplot(acfdata, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = positive), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = negative), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) #+ johnnywu_315_theme
return(graph)
}
auto(rand_ts) +
labs(title = "Autocorrelations for Random Samples from Normal Distribution", x = "Lag", y = "Autocorrelations")
#auto(filter(trips_per_day_usertype, usertype == "Subscriber")$n_trips) +
#labs(title = "Autocorrelations for NY Bike Rides per Day", x = "Lag", y = "Autocorrelations")
auto(trips_per_day) +
labs(title = "Autocorrelations for NY Bike Rides per Day", x = "Lag", y = "Autocorrelations")
library(reshape2)
auto <- function(time_series) {
data <- acf(time_series, plot = FALSE)
n <- length(time_series)
positive <- 0 + 1.96/sqrt(n-1)
negative <- 0 - 1.96/sqrt(n-1)
lags <- length(data$acf[,,1])
acfdata <- data.frame(lags = 1:lags, acfs = data$acf[,,1])
graph <- ggplot(acfdata, aes(acfs)) +
geom_segment(aes(x=lags, y = 0, xend = lags, yend = acfs)) +
scale_x_continuous(limits = c(-1, lags + 1)) +
scale_y_continuous(limits = c(-.1, 1.1), breaks = c(0.0, .2, .4, .6, .8, 1.0)) +
geom_hline(aes(yintercept = positive), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = negative), colour="blue", linetype="dashed") +
geom_hline(aes(yintercept = 0), colour="black")  + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) #+ johnnywu_315_theme
return(graph)
}
auto(rand_ts) +
labs(title = "Autocorrelations for Random Samples from Normal Distribution", x = "Lag", y = "Autocorrelations")
#auto(filter(trips_per_day_usertype, usertype == "Subscriber")$n_trips) +
#labs(title = "Autocorrelations for NY Bike Rides per Day", x = "Lag", y = "Autocorrelations")
auto(trips_per_day$n_trips) +
labs(title = "Autocorrelations for NY Bike Rides per Day", x = "Lag", y = "Autocorrelations")
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(color="blue")) +
geom_line(aes(y=bike_14, color = "bike_14")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Bike Trips") +
scale_colour_discrete(labels = c("Bike Trips", "Moving Average")) + johnnywu_315_theme
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(color="blue")) +
geom_line(aes(y=bike_14, color = "limegreen")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Bike Trips") +
scale_colour_discrete(labels = c("Bike Trips", "Moving Average")) + johnnywu_315_theme
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(y = bike_14, color="blue")) +
geom_line(aes(color = "limegreen")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Bike Trips") +
scale_colour_discrete(labels = c("Bike Trips", "Moving Average")) + johnnywu_315_theme
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(color="blue")) +
geom_line(aes(y = bike_14, color = "limegreen")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Bike Trips") +
scale_colour_discrete(labels = c("Bike Trips", "Moving Average")) + johnnywu_315_theme
trips_per_day$bike_14 <- bike_moving_averages_14
ggplot(trips_per_day, aes(x = start_date, y = n_trips)) + geom_line(aes(color="blue")) +
geom_line(aes(y = bike_14, color = "indianred1")) +
scale_x_date()  + labs(title = "NYC Bike Trips", y = "Number of Trips", x = "Date", color = "Bike Trips") +
scale_colour_discrete(labels = c("Bike Trips", "Moving Average")) + johnnywu_315_theme
shiny::runApp('CMUjr/36315/Interactivity')
typeof(map)
typeof(map_df)
typeof(state_borders)
typeof(state_borders)
typeof(state_borders)
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
runApp('CMUjr/36315/Interactivity')
